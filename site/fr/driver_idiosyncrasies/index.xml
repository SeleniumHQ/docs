<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singularités du Driver on Documentation Selenium</title>
    <link>https://seleniumhq.github.io/docs/site/fr/driver_idiosyncrasies/</link>
    <description>Recent content in Singularités du Driver on Documentation Selenium</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://seleniumhq.github.io/docs/site/fr/driver_idiosyncrasies/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Capabilities partagées</title>
      <link>https://seleniumhq.github.io/docs/site/fr/driver_idiosyncrasies/shared_capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/site/fr/driver_idiosyncrasies/shared_capabilities/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 pageLoadStrategy When navigating to a new page via URL, by default Selenium will wait until the page has fully loaded before responding. This works well for beginners, but can cause long wait times on pages that load a large number of third party resources. Using a non default strategy can make test execution faster in cases like this, but can also introduce flakiness where elements on the page change position as elements load in and change size.</description>
    </item>
    
    <item>
      <title>Capabilities spécifiques du Driver</title>
      <link>https://seleniumhq.github.io/docs/site/fr/driver_idiosyncrasies/driver_specific_capabilities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/site/fr/driver_idiosyncrasies/driver_specific_capabilities/</guid>
      <description>Page being translated from English to French. Do you speak French? Help us to translate it by sending us pull requests!
 Firefox Define Capabilities using FirefoxOptions FirefoxOptions is the new way to define capabilities for the Firefox browser and should generally be used in preference to DesiredCapabilities.
Java Python C# Ruby JavaScript FirefoxOptions options = new FirefoxOptions(); options.addPreference(&amp;#34;network.proxy.type&amp;#34;, 0); driver = new RemoteWebDriver(options);   from selenium.webdriver.firefox.options import Options options = Options() options.</description>
    </item>
    
  </channel>
</rss>