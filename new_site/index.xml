<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Selenium Documentation</title>
    <link>https://seleniumhq.github.io/docs/new_site/</link>
    <description>Recent content on Selenium Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>2013-{year}</copyright>
    
	<atom:link href="https://seleniumhq.github.io/docs/new_site/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Browsers</title>
      <link>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/browsers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/browsers/</guid>
      <description>Consumer browsers The Selenium framework officially supports the following browsers:
   Browser Maintainer Versions Supported     Chromium Chromium All versions   Firefox Mozilla 54 and newer   Internet Explorer Selenium 6 and newer   Opera Opera Chromium / Presto 10.5 and newer   Safari Apple 10 and newer    Specialised browsers There is also a set of specialized browsers out there typically used in development environments.</description>
    </item>
    
    <item>
      <title>Installing Selenium libraries</title>
      <link>https://seleniumhq.github.io/docs/new_site/selenium_installation/installing_selenium_libraries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/selenium_installation/installing_selenium_libraries/</guid>
      <description>Installing Selenium libraries First you need to install the Selenium bindings for your automation project. The installation process for libraries depends on the language you choose to use.
Java Installation of Selenium libraries for Java can be done using Maven. Add the selenium-java dependency in your project pom.xml:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.seleniumhq.selenium&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;selenium-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.X&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; The selenium-java dependency supports running your automation project with all Selenium supported browsers. If you want to run tests only in a specific browser, you can add the dependency for that browser in your pom.</description>
    </item>
    
    <item>
      <title>The Selenium project and tools</title>
      <link>https://seleniumhq.github.io/docs/new_site/introduction/the_selenium_project_and_tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/introduction/the_selenium_project_and_tools/</guid>
      <description>Selenium controls web browsers Selenium is many things, but at its core it&amp;rsquo;s a toolset for web browser automation that uses the best techniques available to remotely control browser instances and emulate a user&amp;rsquo;s interaction with the browser.
It allows users to simulate common activities performed by end-users; entering text into fields, selecting drop-down values and checking boxes, and clicking links in documents. It also provides many other controls such as mouse movement, arbitrary JavaScript execution, and much more.</description>
    </item>
    
    <item>
      <title>Installing WebDriver binaries</title>
      <link>https://seleniumhq.github.io/docs/new_site/selenium_installation/installing_webdriver_binaries/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/selenium_installation/installing_webdriver_binaries/</guid>
      <description>Installing WebDriver binaries To execute your project and control browser you need to have browser-specific WebDriver binaries installed.
Download the WebDriver binary supported by your browser and place it in the System PATH.</description>
    </item>
    
    <item>
      <title>On test automation</title>
      <link>https://seleniumhq.github.io/docs/new_site/introduction/on_test_automation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/introduction/on_test_automation/</guid>
      <description>First, start by asking yourself whether or not you really need to use a browser. Odds are good that, at some point, if you&amp;rsquo;re working on a complex web application, you will need to open a browser and actually test it.
Functional end-user tests such as Selenium tests are expensive to run, however. Furthermore, they typically require substantial infrastructure to be in place to be run effectively. It&amp;rsquo;s a good rule to always ask yourself if what you want to test can be done using more lightweight test approaches such as unit tests or with a lower-level approach.</description>
    </item>
    
    <item>
      <title>Third party drivers and plugins</title>
      <link>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/third_party_drivers_and_plugins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/third_party_drivers_and_plugins/</guid>
      <description>Selenium can be extended through the use of plugins. Here are a number of plugins created and maintained by third parties. For more information on how to create your own plugin or have it listed, consult the docs.
Please note that these plugins are not supported, maintained, hosted, or endorsed by the Selenium project. In addition, be advised that the plugins listed below are not necessarily licensed under the Apache License v.</description>
    </item>
    
    <item>
      <title>Installing Standalone server</title>
      <link>https://seleniumhq.github.io/docs/new_site/selenium_installation/installing_standalone_server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/selenium_installation/installing_standalone_server/</guid>
      <description>Installing Standalone server If you plan to use Grid then you should download the selenium-server-standalone JAR file. The selenium-server-standalone jar is never uploaded, but all the components are available via selenium-server. The standalone JAR contains everything, including the remote Selenium server and the client-side bindings. This means that if you use the selenium-server-standalone jar in your project, then you don&amp;rsquo;t have to add selenium-java or a browser specific jar.</description>
    </item>
    
    <item>
      <title>Locating elements</title>
      <link>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/locating_elements/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/locating_elements/</guid>
      <description>Locating one element One of the most fundamental techniques to learn when using WebDriver is how to find elements on the page. WebDriver offers a number of built-in selector types, amongst them finding an element by its ID attribute:
Java Python C# Ruby JavaScript WebElement cheese = driver.findElement(By.id(&amp;#34;cheese&amp;#34;));   driver.find_element_by_id(&amp;#34;cheese&amp;#34;)   IWebElement element = driver.FindElement(By.Id(&amp;#34;cheese&amp;#34;));   driver.find_element(id: &amp;#34;cheese&amp;#34;)   const cheese = await driver.findElement(By.id(&amp;#39;cheese&amp;#39;));     As seen in the example, locating elements in WebDriver is done on the WebDriver instance object.</description>
    </item>
    
    <item>
      <title>Types of testing</title>
      <link>https://seleniumhq.github.io/docs/new_site/introduction/types_of_testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/introduction/types_of_testing/</guid>
      <description>TODO: Add paragraphs about acceptance testing, performance testing, load testing, regression testing, test driven development, and/or behavior-driven development (JBehave, Capybara, &amp;amp; Robot Framework), with how they relate to Selenium.</description>
    </item>
    
    <item>
      <title>About this documentation</title>
      <link>https://seleniumhq.github.io/docs/new_site/introduction/about_this_documentation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/introduction/about_this_documentation/</guid>
      <description>These docs, like the code itself, are maintained 100% by volunteers within the Selenium community. Many have been using it since its inception, but many more have only been using it for a short while, and have given their time to help improve the on-boarding experience for new users.
If there is an issue with the documentation, we want to know! The best way to communicate an issue is to visit https://github.</description>
    </item>
    
    <item>
      <title>Performing actions on the AUT*</title>
      <link>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/performing_actions_on_the_aut/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/get_started_with_webdriver/performing_actions_on_the_aut/</guid>
      <description>You can set an element&amp;rsquo;s text using the sendKeys method as follows:
Java Python C# Ruby JavaScript String name = &amp;#34;Charles&amp;#34;; driver.findElement(By.name(&amp;#34;name&amp;#34;)).sendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element_by_name(&amp;#34;name&amp;#34;).send_keys(name)   string name = &amp;#34;Charles&amp;#34;; driver.FindElement(By.Name(&amp;#34;name&amp;#34;)).SendKeys(name);   name = &amp;#34;Charles&amp;#34; driver.find_element(name: &amp;#34;name&amp;#34;).send_keys(name)   const name = &amp;#34;Charles&amp;#34;; await driver.findElement(By.name(&amp;#39;name&amp;#39;)).sendKeys(name);     Some web applications use JavaScript libraries to add drag-and-drop functionality. The following is a basic example of dragging one element onto another element:</description>
    </item>
    
    <item>
      <title>Quick Tour</title>
      <link>https://seleniumhq.github.io/docs/new_site/getting_started/quick/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://seleniumhq.github.io/docs/new_site/getting_started/quick/</guid>
      <description>Selenium is not just one tool or API but it composes many tools.
WebDriver WebDriver is also known as Selenium 2. If you are beginning with desktop website test automation then you are going to be using WebDriver APIs. WebDriver uses browser automation APIs provided by browser vendors to control browser and run tests. This is as if a real user is operating the browser. Since WebDriver does not require its API to be compiled with application code, it is not intrusive in nature.</description>
    </item>
    
  </channel>
</rss>